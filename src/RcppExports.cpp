// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// SendDown
Rcpp::List SendDown(NumericVector cutPoint, IntegerVector splitVar, NumericMatrix Data, StringVector treNodes, StringVector direction);
RcppExport SEXP _mvITR_SendDown(SEXP cutPointSEXP, SEXP splitVarSEXP, SEXP DataSEXP, SEXP treNodesSEXP, SEXP directionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type cutPoint(cutPointSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type splitVar(splitVarSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Data(DataSEXP);
    Rcpp::traits::input_parameter< StringVector >::type treNodes(treNodesSEXP);
    Rcpp::traits::input_parameter< StringVector >::type direction(directionSEXP);
    rcpp_result_gen = Rcpp::wrap(SendDown(cutPoint, splitVar, Data, treNodes, direction));
    return rcpp_result_gen;
END_RCPP
}
// estITR
double estITR(List input);
RcppExport SEXP _mvITR_estITR(SEXP inputSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type input(inputSEXP);
    rcpp_result_gen = Rcpp::wrap(estITR(input));
    return rcpp_result_gen;
END_RCPP
}
// estOpt
List estOpt(NumericVector y, NumericVector r, NumericVector trt, NumericVector prtx, NumericVector rule, double tau, double lambda);
RcppExport SEXP _mvITR_estOpt(SEXP ySEXP, SEXP rSEXP, SEXP trtSEXP, SEXP prtxSEXP, SEXP ruleSEXP, SEXP tauSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type r(rSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type trt(trtSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type prtx(prtxSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type rule(ruleSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(estOpt(y, r, trt, prtx, rule, tau, lambda));
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_hello_world
arma::mat rcpparma_hello_world();
RcppExport SEXP _mvITR_rcpparma_hello_world() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(rcpparma_hello_world());
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_outerproduct
arma::mat rcpparma_outerproduct(const arma::colvec& x);
RcppExport SEXP _mvITR_rcpparma_outerproduct(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_outerproduct(x));
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_innerproduct
double rcpparma_innerproduct(const arma::colvec& x);
RcppExport SEXP _mvITR_rcpparma_innerproduct(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_innerproduct(x));
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_bothproducts
Rcpp::List rcpparma_bothproducts(const arma::colvec& x);
RcppExport SEXP _mvITR_rcpparma_bothproducts(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_bothproducts(x));
    return rcpp_result_gen;
END_RCPP
}
// splitConditional
Rcpp::List splitConditional(NumericVector zcut, NumericMatrix zcutCat, List datMatrix, List parameters);
RcppExport SEXP _mvITR_splitConditional(SEXP zcutSEXP, SEXP zcutCatSEXP, SEXP datMatrixSEXP, SEXP parametersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type zcut(zcutSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type zcutCat(zcutCatSEXP);
    Rcpp::traits::input_parameter< List >::type datMatrix(datMatrixSEXP);
    Rcpp::traits::input_parameter< List >::type parameters(parametersSEXP);
    rcpp_result_gen = Rcpp::wrap(splitConditional(zcut, zcutCat, datMatrix, parameters));
    return rcpp_result_gen;
END_RCPP
}
// splitContinuous
Rcpp::List splitContinuous(NumericVector zcut, NumericMatrix zcutCat, List datMatrix, List parameters);
RcppExport SEXP _mvITR_splitContinuous(SEXP zcutSEXP, SEXP zcutCatSEXP, SEXP datMatrixSEXP, SEXP parametersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type zcut(zcutSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type zcutCat(zcutCatSEXP);
    Rcpp::traits::input_parameter< List >::type datMatrix(datMatrixSEXP);
    Rcpp::traits::input_parameter< List >::type parameters(parametersSEXP);
    rcpp_result_gen = Rcpp::wrap(splitContinuous(zcut, zcutCat, datMatrix, parameters));
    return rcpp_result_gen;
END_RCPP
}
// splitSurvival
Rcpp::List splitSurvival(NumericVector zcut, NumericMatrix zcutCat, List datMatrix, List parameters);
RcppExport SEXP _mvITR_splitSurvival(SEXP zcutSEXP, SEXP zcutCatSEXP, SEXP datMatrixSEXP, SEXP parametersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type zcut(zcutSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type zcutCat(zcutCatSEXP);
    Rcpp::traits::input_parameter< List >::type datMatrix(datMatrixSEXP);
    Rcpp::traits::input_parameter< List >::type parameters(parametersSEXP);
    rcpp_result_gen = Rcpp::wrap(splitSurvival(zcut, zcutCat, datMatrix, parameters));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_mvITR_SendDown", (DL_FUNC) &_mvITR_SendDown, 5},
    {"_mvITR_estITR", (DL_FUNC) &_mvITR_estITR, 1},
    {"_mvITR_estOpt", (DL_FUNC) &_mvITR_estOpt, 7},
    {"_mvITR_rcpparma_hello_world", (DL_FUNC) &_mvITR_rcpparma_hello_world, 0},
    {"_mvITR_rcpparma_outerproduct", (DL_FUNC) &_mvITR_rcpparma_outerproduct, 1},
    {"_mvITR_rcpparma_innerproduct", (DL_FUNC) &_mvITR_rcpparma_innerproduct, 1},
    {"_mvITR_rcpparma_bothproducts", (DL_FUNC) &_mvITR_rcpparma_bothproducts, 1},
    {"_mvITR_splitConditional", (DL_FUNC) &_mvITR_splitConditional, 4},
    {"_mvITR_splitContinuous", (DL_FUNC) &_mvITR_splitContinuous, 4},
    {"_mvITR_splitSurvival", (DL_FUNC) &_mvITR_splitSurvival, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_mvITR(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
